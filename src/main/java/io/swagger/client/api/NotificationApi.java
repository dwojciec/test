/**
 * AHOI API
 * AHOI (working title) is our managed and flexible banking API designed to offer easy access to your users bank accounts.  [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Imprint](https://symbioticon.de/legal-notices/)  [Privacy Disclaimer](https://symbioticon.de/data-protection-guidelines/)  &copy; 2016 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Notification;
import io.swagger.client.model.BalanceChangeNotification;
import io.swagger.client.model.BudgetNotification;
import io.swagger.client.model.DailySummaryNotification;
import io.swagger.client.model.NewTransactionNotification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationApi {
    private ApiClient apiClient;

    public NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteNotification */
    private com.squareup.okhttp.Call deleteNotificationCall(Long targetId, Long notificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling deleteNotification(Async)");
        }
        
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling deleteNotification(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications/{notificationId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()))
        .replaceAll("\\{" + "notificationId" + "\\}", apiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete notification
     * Delete notification identified by **notificationId**.
     * @param targetId The **targetId** for which to delete the notification (required)
     * @param notificationId The **notificationId** to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNotification(Long targetId, Long notificationId) throws ApiException {
        deleteNotificationWithHttpInfo(targetId, notificationId);
    }

    /**
     * Delete notification
     * Delete notification identified by **notificationId**.
     * @param targetId The **targetId** for which to delete the notification (required)
     * @param notificationId The **notificationId** to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNotificationWithHttpInfo(Long targetId, Long notificationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotificationCall(targetId, notificationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete notification (asynchronously)
     * Delete notification identified by **notificationId**.
     * @param targetId The **targetId** for which to delete the notification (required)
     * @param notificationId The **notificationId** to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotificationAsync(Long targetId, Long notificationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotificationCall(targetId, notificationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getNotification */
    private com.squareup.okhttp.Call getNotificationCall(Long targetId, Long notificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling getNotification(Async)");
        }
        
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling getNotification(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications/{notificationId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()))
        .replaceAll("\\{" + "notificationId" + "\\}", apiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get notification 
     * Retrieve notification identified by **notificationId**.
     * @param targetId The **targetId** for which to retrieve the notification (required)
     * @param notificationId The *notificationId* to retrieve (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Notification getNotification(Long targetId, Long notificationId) throws ApiException {
        ApiResponse<Notification> resp = getNotificationWithHttpInfo(targetId, notificationId);
        return resp.getData();
    }

    /**
     * Get notification 
     * Retrieve notification identified by **notificationId**.
     * @param targetId The **targetId** for which to retrieve the notification (required)
     * @param notificationId The *notificationId* to retrieve (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Notification> getNotificationWithHttpInfo(Long targetId, Long notificationId) throws ApiException {
        com.squareup.okhttp.Call call = getNotificationCall(targetId, notificationId, null, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get notification  (asynchronously)
     * Retrieve notification identified by **notificationId**.
     * @param targetId The **targetId** for which to retrieve the notification (required)
     * @param notificationId The *notificationId* to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotificationAsync(Long targetId, Long notificationId, final ApiCallback<Notification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotificationCall(targetId, notificationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getNotifications */
    private com.squareup.okhttp.Call getNotificationsCall(Long targetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling getNotifications(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List notifications
     * Retrieve all notifications associated with **targetId**.
     * @param targetId The **targetId** for which to retrieve notifications (required)
     * @return List&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Notification> getNotifications(Long targetId) throws ApiException {
        ApiResponse<List<Notification>> resp = getNotificationsWithHttpInfo(targetId);
        return resp.getData();
    }

    /**
     * List notifications
     * Retrieve all notifications associated with **targetId**.
     * @param targetId The **targetId** for which to retrieve notifications (required)
     * @return ApiResponse&lt;List&lt;Notification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Notification>> getNotificationsWithHttpInfo(Long targetId) throws ApiException {
        com.squareup.okhttp.Call call = getNotificationsCall(targetId, null, null);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List notifications (asynchronously)
     * Retrieve all notifications associated with **targetId**.
     * @param targetId The **targetId** for which to retrieve notifications (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotificationsAsync(Long targetId, final ApiCallback<List<Notification>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotificationsCall(targetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postBalanceChangeNotification */
    private com.squareup.okhttp.Call postBalanceChangeNotificationCall(Long targetId, BalanceChangeNotification notificationDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = notificationDto;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling postBalanceChangeNotification(Async)");
        }
        
        // verify the required parameter 'notificationDto' is set
        if (notificationDto == null) {
            throw new ApiException("Missing the required parameter 'notificationDto' when calling postBalanceChangeNotification(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications/balancechangenotification".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a balance change notification
     * Only one notification per target and account can be created.   Receive notifications when the balance crosses the configured threshold; only one of **lowerThreshold** and **upperThreshold** may be set.    This example sends a notification when the balance is less than 0 &amp;euro;    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;BalanceChangeNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;upperThreshold\&quot;: {     \&quot;value\&quot;: 0,     \&quot;currency\&quot;: \&quot;EUR\&quot;   } } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The balance change notification to create (required)
     * @return BalanceChangeNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BalanceChangeNotification postBalanceChangeNotification(Long targetId, BalanceChangeNotification notificationDto) throws ApiException {
        ApiResponse<BalanceChangeNotification> resp = postBalanceChangeNotificationWithHttpInfo(targetId, notificationDto);
        return resp.getData();
    }

    /**
     * Create a balance change notification
     * Only one notification per target and account can be created.   Receive notifications when the balance crosses the configured threshold; only one of **lowerThreshold** and **upperThreshold** may be set.    This example sends a notification when the balance is less than 0 &amp;euro;    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;BalanceChangeNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;upperThreshold\&quot;: {     \&quot;value\&quot;: 0,     \&quot;currency\&quot;: \&quot;EUR\&quot;   } } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The balance change notification to create (required)
     * @return ApiResponse&lt;BalanceChangeNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BalanceChangeNotification> postBalanceChangeNotificationWithHttpInfo(Long targetId, BalanceChangeNotification notificationDto) throws ApiException {
        com.squareup.okhttp.Call call = postBalanceChangeNotificationCall(targetId, notificationDto, null, null);
        Type localVarReturnType = new TypeToken<BalanceChangeNotification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a balance change notification (asynchronously)
     * Only one notification per target and account can be created.   Receive notifications when the balance crosses the configured threshold; only one of **lowerThreshold** and **upperThreshold** may be set.    This example sends a notification when the balance is less than 0 &amp;euro;    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;BalanceChangeNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;upperThreshold\&quot;: {     \&quot;value\&quot;: 0,     \&quot;currency\&quot;: \&quot;EUR\&quot;   } } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The balance change notification to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBalanceChangeNotificationAsync(Long targetId, BalanceChangeNotification notificationDto, final ApiCallback<BalanceChangeNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBalanceChangeNotificationCall(targetId, notificationDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BalanceChangeNotification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postBudgetNotification */
    private com.squareup.okhttp.Call postBudgetNotificationCall(Long targetId, BudgetNotification notificationDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = notificationDto;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling postBudgetNotification(Async)");
        }
        
        // verify the required parameter 'notificationDto' is set
        if (notificationDto == null) {
            throw new ApiException("Missing the required parameter 'notificationDto' when calling postBudgetNotification(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications/budgetnotification".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a budget change notification
     * Receive notifications when the calculated budget for the current month crosses the configured threshold; only one of **lowerThreshold** and **upperThreshold** may be set.    This example send a notification when the budget crosses 100 &amp;euro;    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;BudgetNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;lowerThreshold\&quot;: {     \&quot;value\&quot;: 10000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   } } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The budget change notification to create (required)
     * @return BudgetNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BudgetNotification postBudgetNotification(Long targetId, BudgetNotification notificationDto) throws ApiException {
        ApiResponse<BudgetNotification> resp = postBudgetNotificationWithHttpInfo(targetId, notificationDto);
        return resp.getData();
    }

    /**
     * Create a budget change notification
     * Receive notifications when the calculated budget for the current month crosses the configured threshold; only one of **lowerThreshold** and **upperThreshold** may be set.    This example send a notification when the budget crosses 100 &amp;euro;    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;BudgetNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;lowerThreshold\&quot;: {     \&quot;value\&quot;: 10000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   } } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The budget change notification to create (required)
     * @return ApiResponse&lt;BudgetNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BudgetNotification> postBudgetNotificationWithHttpInfo(Long targetId, BudgetNotification notificationDto) throws ApiException {
        com.squareup.okhttp.Call call = postBudgetNotificationCall(targetId, notificationDto, null, null);
        Type localVarReturnType = new TypeToken<BudgetNotification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a budget change notification (asynchronously)
     * Receive notifications when the calculated budget for the current month crosses the configured threshold; only one of **lowerThreshold** and **upperThreshold** may be set.    This example send a notification when the budget crosses 100 &amp;euro;    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;BudgetNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;lowerThreshold\&quot;: {     \&quot;value\&quot;: 10000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   } } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The budget change notification to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBudgetNotificationAsync(Long targetId, BudgetNotification notificationDto, final ApiCallback<BudgetNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBudgetNotificationCall(targetId, notificationDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BudgetNotification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postDailySummaryNotification */
    private com.squareup.okhttp.Call postDailySummaryNotificationCall(Long targetId, DailySummaryNotification notificationDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = notificationDto;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling postDailySummaryNotification(Async)");
        }
        
        // verify the required parameter 'notificationDto' is set
        if (notificationDto == null) {
            throw new ApiException("Missing the required parameter 'notificationDto' when calling postDailySummaryNotification(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications/dailysummarynotification".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a daily summary notification
     * Receive a notification for your account status on the configured days and at the configured time. Please make sure to pass your timezone or adjust for UTC.    This example notifies you every day at 12:03 UTC    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;DailySummaryNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;daysOfWeek\&quot;: [     &#39;MONDAY&#39;, &#39;TUESDAY&#39;, &#39;WEDNESDAY&#39;,      &#39;THURSDAY&#39;, &#39;FRIDAY&#39;, &#39;SATURDAY&#39;,      &#39;SUNDAY&#39;   ],   \&quot;timeOfDay\&quot;: \&quot;12:03Z\&quot; } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The daily summary notification to create (required)
     * @return DailySummaryNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DailySummaryNotification postDailySummaryNotification(Long targetId, DailySummaryNotification notificationDto) throws ApiException {
        ApiResponse<DailySummaryNotification> resp = postDailySummaryNotificationWithHttpInfo(targetId, notificationDto);
        return resp.getData();
    }

    /**
     * Create a daily summary notification
     * Receive a notification for your account status on the configured days and at the configured time. Please make sure to pass your timezone or adjust for UTC.    This example notifies you every day at 12:03 UTC    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;DailySummaryNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;daysOfWeek\&quot;: [     &#39;MONDAY&#39;, &#39;TUESDAY&#39;, &#39;WEDNESDAY&#39;,      &#39;THURSDAY&#39;, &#39;FRIDAY&#39;, &#39;SATURDAY&#39;,      &#39;SUNDAY&#39;   ],   \&quot;timeOfDay\&quot;: \&quot;12:03Z\&quot; } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The daily summary notification to create (required)
     * @return ApiResponse&lt;DailySummaryNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DailySummaryNotification> postDailySummaryNotificationWithHttpInfo(Long targetId, DailySummaryNotification notificationDto) throws ApiException {
        com.squareup.okhttp.Call call = postDailySummaryNotificationCall(targetId, notificationDto, null, null);
        Type localVarReturnType = new TypeToken<DailySummaryNotification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a daily summary notification (asynchronously)
     * Receive a notification for your account status on the configured days and at the configured time. Please make sure to pass your timezone or adjust for UTC.    This example notifies you every day at 12:03 UTC    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;DailySummaryNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;daysOfWeek\&quot;: [     &#39;MONDAY&#39;, &#39;TUESDAY&#39;, &#39;WEDNESDAY&#39;,      &#39;THURSDAY&#39;, &#39;FRIDAY&#39;, &#39;SATURDAY&#39;,      &#39;SUNDAY&#39;   ],   \&quot;timeOfDay\&quot;: \&quot;12:03Z\&quot; } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The daily summary notification to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDailySummaryNotificationAsync(Long targetId, DailySummaryNotification notificationDto, final ApiCallback<DailySummaryNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDailySummaryNotificationCall(targetId, notificationDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DailySummaryNotification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postNewTransactionNotification */
    private com.squareup.okhttp.Call postNewTransactionNotificationCall(Long targetId, NewTransactionNotification notificationDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = notificationDto;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling postNewTransactionNotification(Async)");
        }
        
        // verify the required parameter 'notificationDto' is set
        if (notificationDto == null) {
            throw new ApiException("Missing the required parameter 'notificationDto' when calling postNewTransactionNotification(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications/newtransactionnotification".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new transaction notification
     * Receive a notification for every new transaction, for transactions within a given threshold or that match a **searchKeyword**. To receive all transactions, simply leave the optional fields blank.     This example notifies you of every transaction that contains the keyword \&quot;food\&quot; between 20 &amp;euro; and 60 &amp;euro;:    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;NewTransactionNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;lowerThreshold\&quot;: {     \&quot;value\&quot;: 2000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   },   \&quot;upperThreshold\&quot;: {     \&quot;value\&quot;: 6000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   },   \&quot;searchKeyword\&quot;: \&quot;Rent\&quot; } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The new transaction notification to create (required)
     * @return NewTransactionNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewTransactionNotification postNewTransactionNotification(Long targetId, NewTransactionNotification notificationDto) throws ApiException {
        ApiResponse<NewTransactionNotification> resp = postNewTransactionNotificationWithHttpInfo(targetId, notificationDto);
        return resp.getData();
    }

    /**
     * Create a new transaction notification
     * Receive a notification for every new transaction, for transactions within a given threshold or that match a **searchKeyword**. To receive all transactions, simply leave the optional fields blank.     This example notifies you of every transaction that contains the keyword \&quot;food\&quot; between 20 &amp;euro; and 60 &amp;euro;:    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;NewTransactionNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;lowerThreshold\&quot;: {     \&quot;value\&quot;: 2000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   },   \&quot;upperThreshold\&quot;: {     \&quot;value\&quot;: 6000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   },   \&quot;searchKeyword\&quot;: \&quot;Rent\&quot; } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The new transaction notification to create (required)
     * @return ApiResponse&lt;NewTransactionNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewTransactionNotification> postNewTransactionNotificationWithHttpInfo(Long targetId, NewTransactionNotification notificationDto) throws ApiException {
        com.squareup.okhttp.Call call = postNewTransactionNotificationCall(targetId, notificationDto, null, null);
        Type localVarReturnType = new TypeToken<NewTransactionNotification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new transaction notification (asynchronously)
     * Receive a notification for every new transaction, for transactions within a given threshold or that match a **searchKeyword**. To receive all transactions, simply leave the optional fields blank.     This example notifies you of every transaction that contains the keyword \&quot;food\&quot; between 20 &amp;euro; and 60 &amp;euro;:    &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;NewTransactionNotification\&quot;,   \&quot;accountId\&quot;: 0,   \&quot;lowerThreshold\&quot;: {     \&quot;value\&quot;: 2000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   },   \&quot;upperThreshold\&quot;: {     \&quot;value\&quot;: 6000,     \&quot;currency\&quot;: \&quot;EUR\&quot;   },   \&quot;searchKeyword\&quot;: \&quot;Rent\&quot; } &#x60;&#x60;&#x60;
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationDto The new transaction notification to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postNewTransactionNotificationAsync(Long targetId, NewTransactionNotification notificationDto, final ApiCallback<NewTransactionNotification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNewTransactionNotificationCall(targetId, notificationDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewTransactionNotification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for putNotification */
    private com.squareup.okhttp.Call putNotificationCall(Long targetId, Long notificationId, Notification notificationDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = notificationDto;
        
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling putNotification(Async)");
        }
        
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling putNotification(Async)");
        }
        
        // verify the required parameter 'notificationDto' is set
        if (notificationDto == null) {
            throw new ApiException("Missing the required parameter 'notificationDto' when calling putNotification(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/notificationtargets/{targetId}/notifications/{notificationId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetId" + "\\}", apiClient.escapeString(targetId.toString()))
        .replaceAll("\\{" + "notificationId" + "\\}", apiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update notification
     * Update the notification identified by **notificationId**. The **notificationId** must match the **id** in **notificationDto**. Please note that type depending restrictions from creating a notification also apply here.
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationId The **notificationId** to update (required)
     * @param notificationDto The notification data to update (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Notification putNotification(Long targetId, Long notificationId, Notification notificationDto) throws ApiException {
        ApiResponse<Notification> resp = putNotificationWithHttpInfo(targetId, notificationId, notificationDto);
        return resp.getData();
    }

    /**
     * Update notification
     * Update the notification identified by **notificationId**. The **notificationId** must match the **id** in **notificationDto**. Please note that type depending restrictions from creating a notification also apply here.
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationId The **notificationId** to update (required)
     * @param notificationDto The notification data to update (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Notification> putNotificationWithHttpInfo(Long targetId, Long notificationId, Notification notificationDto) throws ApiException {
        com.squareup.okhttp.Call call = putNotificationCall(targetId, notificationId, notificationDto, null, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update notification (asynchronously)
     * Update the notification identified by **notificationId**. The **notificationId** must match the **id** in **notificationDto**. Please note that type depending restrictions from creating a notification also apply here.
     * @param targetId The **targetId** for which to create the notification (required)
     * @param notificationId The **notificationId** to update (required)
     * @param notificationDto The notification data to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putNotificationAsync(Long targetId, Long notificationId, Notification notificationDto, final ApiCallback<Notification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putNotificationCall(targetId, notificationId, notificationDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
