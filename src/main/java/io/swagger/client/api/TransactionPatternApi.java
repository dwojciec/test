/**
 * AHOI API
 * AHOI (working title) is our managed and flexible banking API designed to offer easy access to your users bank accounts.  [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Imprint](https://symbioticon.de/legal-notices/)  [Privacy Disclaimer](https://symbioticon.de/data-protection-guidelines/)  &copy; 2016 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.TransactionPattern;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionPatternApi {
    private ApiClient apiClient;

    public TransactionPatternApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionPatternApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for activateTransactionPattern */
    private com.squareup.okhttp.Call activateTransactionPatternCall(Long patternId, String activated, Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling activateTransactionPattern(Async)");
        }
        
        // verify the required parameter 'activated' is set
        if (activated == null) {
            throw new ApiException("Missing the required parameter 'activated' when calling activateTransactionPattern(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling activateTransactionPattern(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/accounts/{accountId}/transactionpatterns/{patternId}/active/{activated}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "patternId" + "\\}", apiClient.escapeString(patternId.toString()))
        .replaceAll("\\{" + "activated" + "\\}", apiClient.escapeString(activated.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Enable a transaction pattern
     * Disabling the transaction pattern results in ignoring the pattern in the forecast. The transaction still exists and relations with transactions are not modified.
     * @param patternId The **patternId** to (de)activate (required)
     * @param activated If &#x60;true&#x60;, the pattern will be used for forecast calculations;         &#x60;false&#x60; will be ignored (required)
     * @param accountId The **accountId** for which to activate the pattern (required)
     * @return TransactionPattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionPattern activateTransactionPattern(Long patternId, String activated, Long accountId) throws ApiException {
        ApiResponse<TransactionPattern> resp = activateTransactionPatternWithHttpInfo(patternId, activated, accountId);
        return resp.getData();
    }

    /**
     * Enable a transaction pattern
     * Disabling the transaction pattern results in ignoring the pattern in the forecast. The transaction still exists and relations with transactions are not modified.
     * @param patternId The **patternId** to (de)activate (required)
     * @param activated If &#x60;true&#x60;, the pattern will be used for forecast calculations;         &#x60;false&#x60; will be ignored (required)
     * @param accountId The **accountId** for which to activate the pattern (required)
     * @return ApiResponse&lt;TransactionPattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionPattern> activateTransactionPatternWithHttpInfo(Long patternId, String activated, Long accountId) throws ApiException {
        com.squareup.okhttp.Call call = activateTransactionPatternCall(patternId, activated, accountId, null, null);
        Type localVarReturnType = new TypeToken<TransactionPattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable a transaction pattern (asynchronously)
     * Disabling the transaction pattern results in ignoring the pattern in the forecast. The transaction still exists and relations with transactions are not modified.
     * @param patternId The **patternId** to (de)activate (required)
     * @param activated If &#x60;true&#x60;, the pattern will be used for forecast calculations;         &#x60;false&#x60; will be ignored (required)
     * @param accountId The **accountId** for which to activate the pattern (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateTransactionPatternAsync(Long patternId, String activated, Long accountId, final ApiCallback<TransactionPattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateTransactionPatternCall(patternId, activated, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionPattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTransactionPattern */
    private com.squareup.okhttp.Call deleteTransactionPatternCall(Long patternId, Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling deleteTransactionPattern(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteTransactionPattern(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/accounts/{accountId}/transactionpatterns/{patternId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "patternId" + "\\}", apiClient.escapeString(patternId.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete transaction pattern
     * Delete the transaction pattern identified by the **patternId**. All associated transactions will be updated to {{patternId &#x3D; null}}.
     * @param patternId The **patternId** to delete (required)
     * @param accountId The **accountId** for the transaction pattern to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTransactionPattern(Long patternId, Long accountId) throws ApiException {
        deleteTransactionPatternWithHttpInfo(patternId, accountId);
    }

    /**
     * Delete transaction pattern
     * Delete the transaction pattern identified by the **patternId**. All associated transactions will be updated to {{patternId &#x3D; null}}.
     * @param patternId The **patternId** to delete (required)
     * @param accountId The **accountId** for the transaction pattern to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTransactionPatternWithHttpInfo(Long patternId, Long accountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransactionPatternCall(patternId, accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete transaction pattern (asynchronously)
     * Delete the transaction pattern identified by the **patternId**. All associated transactions will be updated to {{patternId &#x3D; null}}.
     * @param patternId The **patternId** to delete (required)
     * @param accountId The **accountId** for the transaction pattern to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTransactionPatternAsync(Long patternId, Long accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransactionPatternCall(patternId, accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getTransactionPattern */
    private com.squareup.okhttp.Call getTransactionPatternCall(Long patternId, Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling getTransactionPattern(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getTransactionPattern(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/accounts/{accountId}/transactionpatterns/{patternId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "patternId" + "\\}", apiClient.escapeString(patternId.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get transaction pattern
     * Returns the transaction pattern identified by **patternId** in relationship with  **accountId**.
     * @param patternId The **patternId** for the pattern to retrieve (required)
     * @param accountId The **accoundId** for the pattern to retrieve (required)
     * @return TransactionPattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionPattern getTransactionPattern(Long patternId, Long accountId) throws ApiException {
        ApiResponse<TransactionPattern> resp = getTransactionPatternWithHttpInfo(patternId, accountId);
        return resp.getData();
    }

    /**
     * Get transaction pattern
     * Returns the transaction pattern identified by **patternId** in relationship with  **accountId**.
     * @param patternId The **patternId** for the pattern to retrieve (required)
     * @param accountId The **accoundId** for the pattern to retrieve (required)
     * @return ApiResponse&lt;TransactionPattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionPattern> getTransactionPatternWithHttpInfo(Long patternId, Long accountId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionPatternCall(patternId, accountId, null, null);
        Type localVarReturnType = new TypeToken<TransactionPattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get transaction pattern (asynchronously)
     * Returns the transaction pattern identified by **patternId** in relationship with  **accountId**.
     * @param patternId The **patternId** for the pattern to retrieve (required)
     * @param accountId The **accoundId** for the pattern to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionPatternAsync(Long patternId, Long accountId, final ApiCallback<TransactionPattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionPatternCall(patternId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionPattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listTransactionPatterns */
    private com.squareup.okhttp.Call listTransactionPatternsCall(Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listTransactionPatterns(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/accounts/{accountId}/transactionpatterns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List transaction patterns for account
     * Returns all transaction pattern for **accountId**. Transaction patterns are recurring transactions automatically identified by the server or manually created via [create transaction pattern](#!/Transaction_pattern/postTransactionPattern).
     * @param accountId The **accountId** for which to retrieve transaction patterns (required)
     * @return List&lt;TransactionPattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TransactionPattern> listTransactionPatterns(Long accountId) throws ApiException {
        ApiResponse<List<TransactionPattern>> resp = listTransactionPatternsWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * List transaction patterns for account
     * Returns all transaction pattern for **accountId**. Transaction patterns are recurring transactions automatically identified by the server or manually created via [create transaction pattern](#!/Transaction_pattern/postTransactionPattern).
     * @param accountId The **accountId** for which to retrieve transaction patterns (required)
     * @return ApiResponse&lt;List&lt;TransactionPattern&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TransactionPattern>> listTransactionPatternsWithHttpInfo(Long accountId) throws ApiException {
        com.squareup.okhttp.Call call = listTransactionPatternsCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<List<TransactionPattern>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List transaction patterns for account (asynchronously)
     * Returns all transaction pattern for **accountId**. Transaction patterns are recurring transactions automatically identified by the server or manually created via [create transaction pattern](#!/Transaction_pattern/postTransactionPattern).
     * @param accountId The **accountId** for which to retrieve transaction patterns (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransactionPatternsAsync(Long accountId, final ApiCallback<List<TransactionPattern>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransactionPatternsCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TransactionPattern>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postTransactionPattern */
    private com.squareup.okhttp.Call postTransactionPatternCall(TransactionPattern transactionPatternDto, Long accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transactionPatternDto;
        
        // verify the required parameter 'transactionPatternDto' is set
        if (transactionPatternDto == null) {
            throw new ApiException("Missing the required parameter 'transactionPatternDto' when calling postTransactionPattern(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postTransactionPattern(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/accounts/{accountId}/transactionpatterns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new pattern
     * Create a new pattern for an **accountId**. The **cycle** can be one of &#x60;MONTHLY&#x60;, &#x60;QUARTERLY&#x60;, &#x60;SEMI_ANNUALLY&#x60; or &#x60;ANNUALLY&#x60;. The **day** can be between &#x60;1&#x60; and &#x60;366&#x60;, depending on **cycle**:  | cycle | day range | example | | --- | --- | --- | | &#x60;MONTHLY&#x60; | &#x60;1&#x60;-&#x60;31&#x60;  | every 29th of the month &#x3D;&gt; &#x60;29&#x60; | | &#x60;QUARTERLY&#x60; | &#x60;1&#x60;-&#x60;92&#x60;  | 23rd of February (23rd of May, etc.) &#x3D;&gt; &#x60;54&#x60; (31 [complete first month] + 23 [days in second month]) | | &#x60;SEMI_ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;184&#x60; | 1st of May and 1st of November &#x3D;&gt; &#x60;121&#x60; (for first half of year: 31 + 28 + 31 + 30 + 1) | | &#x60;ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;366&#x60; | 24th of December &#x3D;&gt; &#x60;358&#x60; |  If a similar pattern already exists, you will receive an HTTP status code 409.
     * @param transactionPatternDto The transaction pattern to create (required)
     * @param accountId The **accountId** to which the new created pattern is associated with (required)
     * @return TransactionPattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionPattern postTransactionPattern(TransactionPattern transactionPatternDto, Long accountId) throws ApiException {
        ApiResponse<TransactionPattern> resp = postTransactionPatternWithHttpInfo(transactionPatternDto, accountId);
        return resp.getData();
    }

    /**
     * Create a new pattern
     * Create a new pattern for an **accountId**. The **cycle** can be one of &#x60;MONTHLY&#x60;, &#x60;QUARTERLY&#x60;, &#x60;SEMI_ANNUALLY&#x60; or &#x60;ANNUALLY&#x60;. The **day** can be between &#x60;1&#x60; and &#x60;366&#x60;, depending on **cycle**:  | cycle | day range | example | | --- | --- | --- | | &#x60;MONTHLY&#x60; | &#x60;1&#x60;-&#x60;31&#x60;  | every 29th of the month &#x3D;&gt; &#x60;29&#x60; | | &#x60;QUARTERLY&#x60; | &#x60;1&#x60;-&#x60;92&#x60;  | 23rd of February (23rd of May, etc.) &#x3D;&gt; &#x60;54&#x60; (31 [complete first month] + 23 [days in second month]) | | &#x60;SEMI_ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;184&#x60; | 1st of May and 1st of November &#x3D;&gt; &#x60;121&#x60; (for first half of year: 31 + 28 + 31 + 30 + 1) | | &#x60;ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;366&#x60; | 24th of December &#x3D;&gt; &#x60;358&#x60; |  If a similar pattern already exists, you will receive an HTTP status code 409.
     * @param transactionPatternDto The transaction pattern to create (required)
     * @param accountId The **accountId** to which the new created pattern is associated with (required)
     * @return ApiResponse&lt;TransactionPattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionPattern> postTransactionPatternWithHttpInfo(TransactionPattern transactionPatternDto, Long accountId) throws ApiException {
        com.squareup.okhttp.Call call = postTransactionPatternCall(transactionPatternDto, accountId, null, null);
        Type localVarReturnType = new TypeToken<TransactionPattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new pattern (asynchronously)
     * Create a new pattern for an **accountId**. The **cycle** can be one of &#x60;MONTHLY&#x60;, &#x60;QUARTERLY&#x60;, &#x60;SEMI_ANNUALLY&#x60; or &#x60;ANNUALLY&#x60;. The **day** can be between &#x60;1&#x60; and &#x60;366&#x60;, depending on **cycle**:  | cycle | day range | example | | --- | --- | --- | | &#x60;MONTHLY&#x60; | &#x60;1&#x60;-&#x60;31&#x60;  | every 29th of the month &#x3D;&gt; &#x60;29&#x60; | | &#x60;QUARTERLY&#x60; | &#x60;1&#x60;-&#x60;92&#x60;  | 23rd of February (23rd of May, etc.) &#x3D;&gt; &#x60;54&#x60; (31 [complete first month] + 23 [days in second month]) | | &#x60;SEMI_ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;184&#x60; | 1st of May and 1st of November &#x3D;&gt; &#x60;121&#x60; (for first half of year: 31 + 28 + 31 + 30 + 1) | | &#x60;ANNUALLY&#x60; | &#x60;1&#x60;-&#x60;366&#x60; | 24th of December &#x3D;&gt; &#x60;358&#x60; |  If a similar pattern already exists, you will receive an HTTP status code 409.
     * @param transactionPatternDto The transaction pattern to create (required)
     * @param accountId The **accountId** to which the new created pattern is associated with (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTransactionPatternAsync(TransactionPattern transactionPatternDto, Long accountId, final ApiCallback<TransactionPattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTransactionPatternCall(transactionPatternDto, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionPattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
